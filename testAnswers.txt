Questions
1) What are the four steps of mergesort?
    1. Divide 
    2. Sort 
    3. Combine 
    4. Return 

2) Using JavaScript, generate a random number between 50 and 100.

    Math.ceil(Math.random() * 50 + 50);  

3) Using Javascript, generate a random number between -100 and 100.

    Math.round(100 + Math.random() * -100) ;  

4) Write a coin flip function. It should return the string "heads" half the time and the string "tails" the other half

  function coinFlip() {  
     let flip = Math.floor(Math.random() * 2) + 1;  
 if (flip === 1){  
   console.log("Heads");  
 }  
 else {  
 console.log("Tails");  
 }  
}  
coinFlip(); 

5) Re-state the following expression without using negation: !(10 > x)

    10 <= x 

6) Re-state the following expression without using negation: !(a > 10 && b <= 5)

    (a <= 10 || b > 5) 

7) Re-state the following expression without repeating variable a: (a && x <= 10) || (a && y < 0)

    a (x <= 10 || y < 0) 

8) Re-state the following expression without negations: !( (a > 10) || (b > 10) || (c > 10) || (isAdmin) )

    ((a <= 10) && (b<= 10) && (c <= 10 && isAdmin)) 

9) Write a function which, given a 2-d array of strings, returns the concatenation of all the strings.

  let arr = [[['code'],['eat']],[["sleep"], ['repeat']]];  
  
function allConcat(arr) {  
var ret = [];  
for(var i = 0; i < arr.length; i++) {  
if(Array.isArray(arr[i])) {  
ret = ret.concat(allConcat  
(arr[i]));  
} else {  
ret.push(arr[i]);  
}  
}  
return ret;  
}  
allConcat(arr); 

 ----- Expected Output-----
(4) ["code", "eat", "sleep", "repeat"] 

10) Write a function which, given a 2-d array and another value x, returns true if x is present in the 2-d array, and false otherwise.
  
var arr = [1,3,4,5,6,7,8,9,10];  
var x = 0;  
  
function storesElement(arr, x){   
for (var i = 0; i <arr.length; i++){   
if (arr[i] == x) return true;   
}   
return false;   
}   
  
storesElement(arr, 6);/------ Expected Output true
 

11) Write a function which, given an two sorted arrays of sizes m and n, returns a larger sorted array of size m+n. This function must work in O(m+n) time.

var arr1 = [1,2,3,4,5];  
var arr2 = [6,7,8,9,10];  

var sortArr = []; 
function newArr(arr1,arr2){  
var m = arr1.length;  
var n = arr2.length;  
for (var i =0; i <arr.length; i++){  
    sortArr.sort(arr1, arr2);  
    lrgArrSort = arr1 + ',' + arr2;  
    lrgArrSize = m + n;  
}  
    return lrgArrSort + ' /Array Length is ' + lrgArrSize  
}  
 
newArr(arr1,arr2) 
 
"1,2,3,4,5,6,7,8,9,10 /Array Length is 10" 


14) For exercises 9 and 10, if you assume that n is the size of one side of the matrix, what is the time complexity (Big Oh) of the algorithms you wrote?
 

 9) linear or O(n) 

 10) linear or O(n) 


15) What is the time complexity of the following function?

  function thugPop(arr){
    var ret = [];
    for (var i === 0; i < arr.length; i++){
      if (arr[i] % 15 == 0) ret.push('thugPop');
      else if (arr[i] % 5 == 0) ret.push('thug');
      else if (arr[i] %3 == 0 ) ret.push('pop');
      else ret.push(arr[i]);
    }
    return ret;
  }
            quadratic or O(n^2)


16) What is the time complexity of the following function?
  function thugify(schoolList){
    return schoolList.map(function(schoolObj){
      var school = Object.assign({}, schoolObj);
      school.students.forEach(function(student){
        if (Math.random() > 0.5){
          student.lastName += 'dogg';
        }
        else {
          student.firstName = "lil' "+ student.firstName;
        }
      });
    });
  }

            linear or O(n) 


17) What is the time complexity of the following function?
  function countRepeats(strArr){
    var repeats = 0;
    strArr.forEach(function(str, index){
      var currentRepeats = strArr.filter(function(innerStr, idx){
        return (innerStr === str && index != idx)
      });
      if (currentRepeats.length > 0){
        repeats++;
      }
    });
    return repeats;
  }

                linear or O(n) 


18) What are the main operations of a stack?
    1. push : adds one or more elements to the end of an array and returns the new length 
    2. pop  :removes the last element from an array and returns that value to the caller. This method will also changes the length of the array.


19) What are the main operations of a queue?
     1. Enqueue() : A method that adds items at one end and dequeue(aka removes ) item at the other, just like a line of people queuing up for tickets to the latest Drake concert.
     2. Dequeue() : A method that removes from the queue and then executes the function/removes value from the front, returns size 

20) What is the runtime of bubblesort? How does it work?
    1. quadratic O(n^2) 
    2. Bubblesort will comparevery number inside an array. If the number is smaller than the last, then it will swap it until all numbers are in order from left to right (smallest to largest).
    https://www.youtube.com/watch?v=lyZQPjUT5B4 

21) Create a personal website and upload it so that it is accessible at yourdomain.fvi-grad.com.

http://asoler.fvi-grad.com/